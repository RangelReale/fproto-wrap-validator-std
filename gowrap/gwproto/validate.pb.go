// Code generated by protoc-gen-go. DO NOT EDIT.
// source: validate.proto

/*
Package gwproto is a generated protocol buffer package.

It is generated from these files:
	validate.proto

It has these top-level messages:
	FieldValidator
	RepeatedFieldValidator
*/
package gwproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/protoc-gen-go/descriptor"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type FieldValidator struct {
	// Whether the field is required.
	Xrequired *bool `protobuf:"varint,1,opt,name=xrequired" json:"xrequired,omitempty"`
	// Uses a Golang RE2-syntax regex to match the field contents.
	Regex *string `protobuf:"bytes,2,opt,name=regex" json:"regex,omitempty"`
	// Field value of integer strictly greater than this value.
	IntGt *int64 `protobuf:"varint,3,opt,name=int_gt,json=intGt" json:"int_gt,omitempty"`
	// Field value of integer strictly smaller than this value.
	IntLt *int64 `protobuf:"varint,4,opt,name=int_lt,json=intLt" json:"int_lt,omitempty"`
	// Field value of integer strictly greater than this value.
	IntGte *int64 `protobuf:"varint,5,opt,name=int_gte,json=intGte" json:"int_gte,omitempty"`
	// Field value of integer strictly smaller than this value.
	IntLte *int64 `protobuf:"varint,6,opt,name=int_lte,json=intLte" json:"int_lte,omitempty"`
	// Field value of double strictly greater than this value.
	// Note that this value can only take on a valid floating point
	// value. Use together with float_epsilon if you need something more specific.
	FloatGt *float64 `protobuf:"fixed64,7,opt,name=float_gt,json=floatGt" json:"float_gt,omitempty"`
	// Field value of double strictly smaller than this value.
	// Note that this value can only take on a valid floating point
	// value. Use together with float_epsilon if you need something more specific.
	FloatLt *float64 `protobuf:"fixed64,8,opt,name=float_lt,json=floatLt" json:"float_lt,omitempty"`
	// Field value of double describing the epsilon within which
	// any comparison should be considered to be true. For example,
	// when using float_gt = 0.35, using a float_epsilon of 0.05
	// would mean that any value above 0.30 is acceptable. It can be
	// thought of as a {float_value_condition} +- {float_epsilon}.
	// If unset, no correction for floating point inaccuracies in
	// comparisons will be attempted.
	FloatEpsilon *float64 `protobuf:"fixed64,9,opt,name=float_epsilon,json=floatEpsilon" json:"float_epsilon,omitempty"`
	// Floating-point value compared to which the field content should be greater or equal.
	FloatGte *float64 `protobuf:"fixed64,10,opt,name=float_gte,json=floatGte" json:"float_gte,omitempty"`
	// Floating-point value compared to which the field content should be smaller or equal.
	FloatLte *float64 `protobuf:"fixed64,11,opt,name=float_lte,json=floatLte" json:"float_lte,omitempty"`
	// Field value of length greater than this value.
	LengthGt *int64 `protobuf:"varint,12,opt,name=length_gt,json=lengthGt" json:"length_gt,omitempty"`
	// Field value of length smaller than this value.
	LengthLt *int64 `protobuf:"varint,13,opt,name=length_lt,json=lengthLt" json:"length_lt,omitempty"`
	// Field value of length greater than this value.
	LengthGte *int64 `protobuf:"varint,14,opt,name=length_gte,json=lengthGte" json:"length_gte,omitempty"`
	// Field value of length smaller than this value.
	LengthLte *int64 `protobuf:"varint,15,opt,name=length_lte,json=lengthLte" json:"length_lte,omitempty"`
	// Field value of integer strictly equal this value.
	LengthEq *int64 `protobuf:"varint,16,opt,name=length_eq,json=lengthEq" json:"length_eq,omitempty"`
	// Used for nested message types, requires that the message type exists.
	MsgExists *bool `protobuf:"varint,994,opt,name=msg_exists,json=msgExists" json:"msg_exists,omitempty"`
	// Human error specifies a user-customizable error that is visible to the user.
	HumanError *string `protobuf:"bytes,995,opt,name=human_error,json=humanError" json:"human_error,omitempty"`
	// Used for string fields, requires the string to be not empty (i.e different from "").
	StringNotEmpty *bool `protobuf:"varint,9911,opt,name=string_not_empty,json=stringNotEmpty" json:"string_not_empty,omitempty"`
	// Repeated field with at least this number of elements.
	RepeatedCountMin *int64 `protobuf:"varint,9912,opt,name=repeated_count_min,json=repeatedCountMin" json:"repeated_count_min,omitempty"`
	// Repeated field with at most this number of elements.
	RepeatedCountMax *int64 `protobuf:"varint,9913,opt,name=repeated_count_max,json=repeatedCountMax" json:"repeated_count_max,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *FieldValidator) Reset()                    { *m = FieldValidator{} }
func (m *FieldValidator) String() string            { return proto.CompactTextString(m) }
func (*FieldValidator) ProtoMessage()               {}
func (*FieldValidator) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *FieldValidator) GetXrequired() bool {
	if m != nil && m.Xrequired != nil {
		return *m.Xrequired
	}
	return false
}

func (m *FieldValidator) GetRegex() string {
	if m != nil && m.Regex != nil {
		return *m.Regex
	}
	return ""
}

func (m *FieldValidator) GetIntGt() int64 {
	if m != nil && m.IntGt != nil {
		return *m.IntGt
	}
	return 0
}

func (m *FieldValidator) GetIntLt() int64 {
	if m != nil && m.IntLt != nil {
		return *m.IntLt
	}
	return 0
}

func (m *FieldValidator) GetIntGte() int64 {
	if m != nil && m.IntGte != nil {
		return *m.IntGte
	}
	return 0
}

func (m *FieldValidator) GetIntLte() int64 {
	if m != nil && m.IntLte != nil {
		return *m.IntLte
	}
	return 0
}

func (m *FieldValidator) GetFloatGt() float64 {
	if m != nil && m.FloatGt != nil {
		return *m.FloatGt
	}
	return 0
}

func (m *FieldValidator) GetFloatLt() float64 {
	if m != nil && m.FloatLt != nil {
		return *m.FloatLt
	}
	return 0
}

func (m *FieldValidator) GetFloatEpsilon() float64 {
	if m != nil && m.FloatEpsilon != nil {
		return *m.FloatEpsilon
	}
	return 0
}

func (m *FieldValidator) GetFloatGte() float64 {
	if m != nil && m.FloatGte != nil {
		return *m.FloatGte
	}
	return 0
}

func (m *FieldValidator) GetFloatLte() float64 {
	if m != nil && m.FloatLte != nil {
		return *m.FloatLte
	}
	return 0
}

func (m *FieldValidator) GetLengthGt() int64 {
	if m != nil && m.LengthGt != nil {
		return *m.LengthGt
	}
	return 0
}

func (m *FieldValidator) GetLengthLt() int64 {
	if m != nil && m.LengthLt != nil {
		return *m.LengthLt
	}
	return 0
}

func (m *FieldValidator) GetLengthGte() int64 {
	if m != nil && m.LengthGte != nil {
		return *m.LengthGte
	}
	return 0
}

func (m *FieldValidator) GetLengthLte() int64 {
	if m != nil && m.LengthLte != nil {
		return *m.LengthLte
	}
	return 0
}

func (m *FieldValidator) GetLengthEq() int64 {
	if m != nil && m.LengthEq != nil {
		return *m.LengthEq
	}
	return 0
}

func (m *FieldValidator) GetMsgExists() bool {
	if m != nil && m.MsgExists != nil {
		return *m.MsgExists
	}
	return false
}

func (m *FieldValidator) GetHumanError() string {
	if m != nil && m.HumanError != nil {
		return *m.HumanError
	}
	return ""
}

func (m *FieldValidator) GetStringNotEmpty() bool {
	if m != nil && m.StringNotEmpty != nil {
		return *m.StringNotEmpty
	}
	return false
}

func (m *FieldValidator) GetRepeatedCountMin() int64 {
	if m != nil && m.RepeatedCountMin != nil {
		return *m.RepeatedCountMin
	}
	return 0
}

func (m *FieldValidator) GetRepeatedCountMax() int64 {
	if m != nil && m.RepeatedCountMax != nil {
		return *m.RepeatedCountMax
	}
	return 0
}

type RepeatedFieldValidator struct {
	// Whether the field is required.
	Xrequired *bool `protobuf:"varint,1,opt,name=xrequired" json:"xrequired,omitempty"`
	// Field value of length greater than this value.
	LengthGt *int64 `protobuf:"varint,12,opt,name=length_gt,json=lengthGt" json:"length_gt,omitempty"`
	// Field value of length smaller than this value.
	LengthLt *int64 `protobuf:"varint,13,opt,name=length_lt,json=lengthLt" json:"length_lt,omitempty"`
	// Field value of length greater than this value.
	LengthGte *int64 `protobuf:"varint,14,opt,name=length_gte,json=lengthGte" json:"length_gte,omitempty"`
	// Field value of length smaller than this value.
	LengthLte *int64 `protobuf:"varint,15,opt,name=length_lte,json=lengthLte" json:"length_lte,omitempty"`
	// Field value of integer strictly equal this value.
	LengthEq         *int64 `protobuf:"varint,16,opt,name=length_eq,json=lengthEq" json:"length_eq,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *RepeatedFieldValidator) Reset()                    { *m = RepeatedFieldValidator{} }
func (m *RepeatedFieldValidator) String() string            { return proto.CompactTextString(m) }
func (*RepeatedFieldValidator) ProtoMessage()               {}
func (*RepeatedFieldValidator) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *RepeatedFieldValidator) GetXrequired() bool {
	if m != nil && m.Xrequired != nil {
		return *m.Xrequired
	}
	return false
}

func (m *RepeatedFieldValidator) GetLengthGt() int64 {
	if m != nil && m.LengthGt != nil {
		return *m.LengthGt
	}
	return 0
}

func (m *RepeatedFieldValidator) GetLengthLt() int64 {
	if m != nil && m.LengthLt != nil {
		return *m.LengthLt
	}
	return 0
}

func (m *RepeatedFieldValidator) GetLengthGte() int64 {
	if m != nil && m.LengthGte != nil {
		return *m.LengthGte
	}
	return 0
}

func (m *RepeatedFieldValidator) GetLengthLte() int64 {
	if m != nil && m.LengthLte != nil {
		return *m.LengthLte
	}
	return 0
}

func (m *RepeatedFieldValidator) GetLengthEq() int64 {
	if m != nil && m.LengthEq != nil {
		return *m.LengthEq
	}
	return 0
}

var E_Field = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.FieldOptions)(nil),
	ExtensionType: (*FieldValidator)(nil),
	Field:         48771,
	Name:          "validate.field",
	Tag:           "bytes,48771,opt,name=field",
	Filename:      "validate.proto",
}

var E_Rfield = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.FieldOptions)(nil),
	ExtensionType: (*RepeatedFieldValidator)(nil),
	Field:         48772,
	Name:          "validate.rfield",
	Tag:           "bytes,48772,opt,name=rfield",
	Filename:      "validate.proto",
}

func init() {
	proto.RegisterType((*FieldValidator)(nil), "validate.FieldValidator")
	proto.RegisterType((*RepeatedFieldValidator)(nil), "validate.RepeatedFieldValidator")
	proto.RegisterExtension(E_Field)
	proto.RegisterExtension(E_Rfield)
}

func init() { proto.RegisterFile("validate.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 531 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x93, 0xcd, 0x8e, 0xd3, 0x3e,
	0x14, 0xc5, 0x95, 0xff, 0xfc, 0xdb, 0xa6, 0xee, 0x4c, 0xa9, 0x2c, 0x3e, 0xcc, 0xc7, 0xa0, 0x68,
	0xd8, 0x94, 0x45, 0x13, 0x89, 0xe5, 0x6c, 0x10, 0xa0, 0xd2, 0x4d, 0xcb, 0x48, 0x59, 0x20, 0xc1,
	0x26, 0xca, 0x34, 0xb7, 0xae, 0x25, 0xc7, 0x4e, 0x9d, 0xdb, 0x99, 0xb2, 0x86, 0x97, 0xe0, 0x49,
	0x80, 0x67, 0xe0, 0x2d, 0xe0, 0x39, 0x90, 0x50, 0xec, 0xa6, 0xcd, 0x48, 0x5d, 0xc0, 0x8e, 0xa5,
	0xcf, 0xef, 0xdc, 0x73, 0xaf, 0xe3, 0x5c, 0xd2, 0xbf, 0x4a, 0xa5, 0xc8, 0x52, 0x84, 0xb0, 0x30,
	0x1a, 0x35, 0xf5, 0xeb, 0xf3, 0x83, 0x80, 0x6b, 0xcd, 0x25, 0x44, 0x56, 0xbf, 0x5c, 0x2f, 0xa2,
	0x0c, 0xca, 0xb9, 0x11, 0x05, 0x6a, 0xe3, 0xbc, 0x67, 0x9f, 0x5b, 0xa4, 0xff, 0x5a, 0x80, 0xcc,
	0xde, 0xba, 0x1a, 0x6d, 0xe8, 0x23, 0xd2, 0xdd, 0x18, 0x58, 0xad, 0x85, 0x81, 0x8c, 0x79, 0x81,
	0x37, 0xf4, 0xe3, 0xbd, 0x40, 0x6f, 0x93, 0x96, 0x01, 0x0e, 0x1b, 0xf6, 0x5f, 0xe0, 0x0d, 0xbb,
	0xb1, 0x3b, 0xd0, 0x3b, 0xa4, 0x2d, 0x14, 0x26, 0x1c, 0xd9, 0x51, 0xe0, 0x0d, 0x8f, 0xe2, 0x96,
	0x50, 0x38, 0xc1, 0x5a, 0x96, 0xc8, 0xfe, 0xdf, 0xc9, 0x53, 0xa4, 0xf7, 0x48, 0xc7, 0xb9, 0x81,
	0xb5, 0xac, 0xde, 0xb6, 0x76, 0xa8, 0x81, 0x44, 0x60, 0xed, 0x1d, 0x98, 0x22, 0xd0, 0xfb, 0xc4,
	0x5f, 0x48, 0x9d, 0xda, 0x0e, 0x9d, 0xc0, 0x1b, 0x7a, 0x71, 0xc7, 0x9e, 0x27, 0xb8, 0x47, 0x12,
	0x99, 0xdf, 0x40, 0x53, 0xa4, 0x4f, 0xc8, 0x89, 0x43, 0x50, 0x94, 0x42, 0x6a, 0xc5, 0xba, 0x96,
	0x1f, 0x5b, 0x71, 0xec, 0x34, 0xfa, 0x90, 0x74, 0xeb, 0x68, 0x60, 0xc4, 0x1a, 0xfc, 0x6d, 0x36,
	0xec, 0x61, 0x35, 0x52, 0xaf, 0x01, 0xa7, 0x0e, 0x4a, 0x50, 0x1c, 0x97, 0xd5, 0x54, 0xc7, 0x76,
	0x5e, 0xdf, 0x09, 0x13, 0x6c, 0x40, 0x89, 0xec, 0xa4, 0x09, 0xa7, 0x48, 0x4f, 0x09, 0xd9, 0x55,
	0x02, 0xeb, 0x5b, 0xda, 0xad, 0x4b, 0xa1, 0x81, 0xab, 0xb6, 0xb7, 0x9a, 0xf8, 0x66, 0x5f, 0x58,
	0xb1, 0x41, 0x33, 0x7a, 0xbc, 0xa2, 0x8f, 0x09, 0xc9, 0x4b, 0x9e, 0xc0, 0x46, 0x94, 0x58, 0xb2,
	0x1f, 0x1d, 0xf7, 0x7e, 0x79, 0xc9, 0xc7, 0x56, 0xa1, 0x01, 0xe9, 0x2d, 0xd7, 0x79, 0xaa, 0x12,
	0x30, 0x46, 0x1b, 0xf6, 0xb3, 0x63, 0x9f, 0x91, 0x58, 0x6d, 0x5c, 0x49, 0xf4, 0x29, 0x19, 0x94,
	0x68, 0x84, 0xe2, 0x89, 0xd2, 0x98, 0x40, 0x5e, 0xe0, 0x07, 0xf6, 0x65, 0x66, 0x73, 0xfa, 0x0e,
	0xbc, 0xd1, 0x38, 0xae, 0x64, 0x3a, 0x22, 0xd4, 0x40, 0x01, 0x29, 0x42, 0x96, 0xcc, 0xf5, 0x5a,
	0x61, 0x92, 0x0b, 0xc5, 0xbe, 0xce, 0xec, 0x4c, 0x83, 0x1a, 0xbd, 0xaa, 0xc8, 0x4c, 0xa8, 0x43,
	0xf6, 0x74, 0xc3, 0xbe, 0x1d, 0xb4, 0xa7, 0x9b, 0xb3, 0xef, 0x1e, 0xb9, 0x1b, 0x6f, 0xc5, 0xbf,
	0xfa, 0x47, 0xff, 0xc5, 0x87, 0x39, 0xbf, 0x20, 0xad, 0x45, 0x75, 0x09, 0x7a, 0x1a, 0xba, 0xad,
	0x0c, 0xeb, 0xad, 0x0c, 0xed, 0xe5, 0x2e, 0x0a, 0x14, 0x5a, 0x95, 0xec, 0xe3, 0xaf, 0x6a, 0xb3,
	0x7a, 0xcf, 0x58, 0xb8, 0x5b, 0xeb, 0x9b, 0x97, 0x8f, 0x5d, 0xce, 0xf9, 0x3b, 0xd2, 0x36, 0x7f,
	0x94, 0xf8, 0x69, 0x9b, 0x18, 0xec, 0x13, 0x0f, 0x7f, 0xd6, 0x78, 0x1b, 0xf8, 0xf2, 0xc5, 0xfb,
	0xe7, 0x5c, 0xe0, 0x72, 0x7d, 0x19, 0xce, 0x75, 0x1e, 0xc5, 0xa9, 0xe2, 0x20, 0x63, 0x48, 0x25,
	0x44, 0x0b, 0xdb, 0x62, 0x74, 0x6d, 0xd2, 0x62, 0x74, 0x55, 0xd7, 0x8d, 0x4a, 0xcc, 0x22, 0xae,
	0x2b, 0x31, 0xe2, 0xd7, 0xd6, 0xf1, 0x3b, 0x00, 0x00, 0xff, 0xff, 0x3a, 0x0c, 0xbc, 0x82, 0x95,
	0x04, 0x00, 0x00,
}
