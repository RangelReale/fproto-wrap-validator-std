// Code generated by protoc-gen-go. DO NOT EDIT.
// source: validator.proto

/*
Package gwproto is a generated protocol buffer package.

It is generated from these files:
	validator.proto

It has these top-level messages:
	FieldValidator
	RepeatedFieldValidator
*/
package gwproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/protoc-gen-go/descriptor"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Field validator. In the case of repeated or map, there rules apply to EACH item, not to the repeated field itself.
// For the repeated field itself rules, see RepeatedFieldValidator.
type FieldValidator struct {
	// Whether the field is required.
	Required bool `protobuf:"varint,1,opt,name=required" json:"required,omitempty"`
	// Uses a Golang RE2-syntax regex to match the field contents.
	Regex string `protobuf:"bytes,2,opt,name=regex" json:"regex,omitempty"`
	// Only allow the exact string value.
	StringEq string `protobuf:"bytes,20,opt,name=string_eq,json=stringEq" json:"string_eq,omitempty"`
	// Field value of integer strictly greater than this value.
	IntGt int64 `protobuf:"varint,30,opt,name=int_gt,json=intGt" json:"int_gt,omitempty"`
	// Field value of integer strictly smaller than this value.
	IntLt int64 `protobuf:"varint,31,opt,name=int_lt,json=intLt" json:"int_lt,omitempty"`
	// Field value of integer strictly greater than this value.
	IntGte int64 `protobuf:"varint,32,opt,name=int_gte,json=intGte" json:"int_gte,omitempty"`
	// Field value of integer strictly smaller than this value.
	IntLte int64 `protobuf:"varint,33,opt,name=int_lte,json=intLte" json:"int_lte,omitempty"`
	// Field value of integer exactly this value.
	IntEq int64 `protobuf:"varint,34,opt,name=int_eq,json=intEq" json:"int_eq,omitempty"`
	// In the case of enums, only allow defined values, else ignored.
	IntEnumCheck bool `protobuf:"varint,70,opt,name=int_enum_check,json=intEnumCheck" json:"int_enum_check,omitempty"`
	// Field value of double strictly greater than this value.
	// Note that this value can only take on a valid floating point
	// value. Use together with float_epsilon if you need something more specific.
	FloatGt float64 `protobuf:"fixed64,40,opt,name=float_gt,json=floatGt" json:"float_gt,omitempty"`
	// Field value of double strictly smaller than this value.
	// Note that this value can only take on a valid floating point
	// value. Use together with float_epsilon if you need something more specific.
	FloatLt float64 `protobuf:"fixed64,41,opt,name=float_lt,json=floatLt" json:"float_lt,omitempty"`
	// Field value of double describing the epsilon within which
	// any comparison should be considered to be true. For example,
	// when using float_gt = 0.35, using a float_epsilon of 0.05
	// would mean that any value above 0.30 is acceptable. It can be
	// thought of as a {float_value_condition} +- {float_epsilon}.
	// If unset, no correction for floating point inaccuracies in
	// comparisons will be attempted.
	FloatEpsilon float64 `protobuf:"fixed64,42,opt,name=float_epsilon,json=floatEpsilon" json:"float_epsilon,omitempty"`
	// Floating-point value compared to which the field content should be greater or equal.
	FloatGte float64 `protobuf:"fixed64,43,opt,name=float_gte,json=floatGte" json:"float_gte,omitempty"`
	// Floating-point value compared to which the field content should be smaller or equal.
	FloatLte float64 `protobuf:"fixed64,44,opt,name=float_lte,json=floatLte" json:"float_lte,omitempty"`
	// Floating-point value compared to which the field content should be equal or whithin the epsilon.
	FloatEq float64 `protobuf:"fixed64,45,opt,name=float_eq,json=floatEq" json:"float_eq,omitempty"`
	// Field value of length greater than this value.
	LengthGt int64 `protobuf:"varint,50,opt,name=length_gt,json=lengthGt" json:"length_gt,omitempty"`
	// Field value of length smaller than this value.
	LengthLt int64 `protobuf:"varint,51,opt,name=length_lt,json=lengthLt" json:"length_lt,omitempty"`
	// Field value of length greater than this value.
	LengthGte int64 `protobuf:"varint,52,opt,name=length_gte,json=lengthGte" json:"length_gte,omitempty"`
	// Field value of length smaller than this value.
	LengthLte int64 `protobuf:"varint,53,opt,name=length_lte,json=lengthLte" json:"length_lte,omitempty"`
	// Field value of integer strictly equal this value.
	LengthEq int64 `protobuf:"varint,54,opt,name=length_eq,json=lengthEq" json:"length_eq,omitempty"`
	BoolEq   bool  `protobuf:"varint,60,opt,name=bool_eq,json=boolEq" json:"bool_eq,omitempty"`
}

func (m *FieldValidator) Reset()                    { *m = FieldValidator{} }
func (m *FieldValidator) String() string            { return proto.CompactTextString(m) }
func (*FieldValidator) ProtoMessage()               {}
func (*FieldValidator) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *FieldValidator) GetRequired() bool {
	if m != nil {
		return m.Required
	}
	return false
}

func (m *FieldValidator) GetRegex() string {
	if m != nil {
		return m.Regex
	}
	return ""
}

func (m *FieldValidator) GetStringEq() string {
	if m != nil {
		return m.StringEq
	}
	return ""
}

func (m *FieldValidator) GetIntGt() int64 {
	if m != nil {
		return m.IntGt
	}
	return 0
}

func (m *FieldValidator) GetIntLt() int64 {
	if m != nil {
		return m.IntLt
	}
	return 0
}

func (m *FieldValidator) GetIntGte() int64 {
	if m != nil {
		return m.IntGte
	}
	return 0
}

func (m *FieldValidator) GetIntLte() int64 {
	if m != nil {
		return m.IntLte
	}
	return 0
}

func (m *FieldValidator) GetIntEq() int64 {
	if m != nil {
		return m.IntEq
	}
	return 0
}

func (m *FieldValidator) GetIntEnumCheck() bool {
	if m != nil {
		return m.IntEnumCheck
	}
	return false
}

func (m *FieldValidator) GetFloatGt() float64 {
	if m != nil {
		return m.FloatGt
	}
	return 0
}

func (m *FieldValidator) GetFloatLt() float64 {
	if m != nil {
		return m.FloatLt
	}
	return 0
}

func (m *FieldValidator) GetFloatEpsilon() float64 {
	if m != nil {
		return m.FloatEpsilon
	}
	return 0
}

func (m *FieldValidator) GetFloatGte() float64 {
	if m != nil {
		return m.FloatGte
	}
	return 0
}

func (m *FieldValidator) GetFloatLte() float64 {
	if m != nil {
		return m.FloatLte
	}
	return 0
}

func (m *FieldValidator) GetFloatEq() float64 {
	if m != nil {
		return m.FloatEq
	}
	return 0
}

func (m *FieldValidator) GetLengthGt() int64 {
	if m != nil {
		return m.LengthGt
	}
	return 0
}

func (m *FieldValidator) GetLengthLt() int64 {
	if m != nil {
		return m.LengthLt
	}
	return 0
}

func (m *FieldValidator) GetLengthGte() int64 {
	if m != nil {
		return m.LengthGte
	}
	return 0
}

func (m *FieldValidator) GetLengthLte() int64 {
	if m != nil {
		return m.LengthLte
	}
	return 0
}

func (m *FieldValidator) GetLengthEq() int64 {
	if m != nil {
		return m.LengthEq
	}
	return 0
}

func (m *FieldValidator) GetBoolEq() bool {
	if m != nil {
		return m.BoolEq
	}
	return false
}

type RepeatedFieldValidator struct {
	// Whether the field is required.
	Required bool `protobuf:"varint,1,opt,name=required" json:"required,omitempty"`
	// Field value of length greater than this value.
	LengthGt int64 `protobuf:"varint,12,opt,name=length_gt,json=lengthGt" json:"length_gt,omitempty"`
	// Field value of length smaller than this value.
	LengthLt int64 `protobuf:"varint,13,opt,name=length_lt,json=lengthLt" json:"length_lt,omitempty"`
	// Field value of length greater than this value.
	LengthGte int64 `protobuf:"varint,14,opt,name=length_gte,json=lengthGte" json:"length_gte,omitempty"`
	// Field value of length smaller than this value.
	LengthLte int64 `protobuf:"varint,15,opt,name=length_lte,json=lengthLte" json:"length_lte,omitempty"`
	// Field value of integer strictly equal this value.
	LengthEq int64 `protobuf:"varint,16,opt,name=length_eq,json=lengthEq" json:"length_eq,omitempty"`
}

func (m *RepeatedFieldValidator) Reset()                    { *m = RepeatedFieldValidator{} }
func (m *RepeatedFieldValidator) String() string            { return proto.CompactTextString(m) }
func (*RepeatedFieldValidator) ProtoMessage()               {}
func (*RepeatedFieldValidator) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *RepeatedFieldValidator) GetRequired() bool {
	if m != nil {
		return m.Required
	}
	return false
}

func (m *RepeatedFieldValidator) GetLengthGt() int64 {
	if m != nil {
		return m.LengthGt
	}
	return 0
}

func (m *RepeatedFieldValidator) GetLengthLt() int64 {
	if m != nil {
		return m.LengthLt
	}
	return 0
}

func (m *RepeatedFieldValidator) GetLengthGte() int64 {
	if m != nil {
		return m.LengthGte
	}
	return 0
}

func (m *RepeatedFieldValidator) GetLengthLte() int64 {
	if m != nil {
		return m.LengthLte
	}
	return 0
}

func (m *RepeatedFieldValidator) GetLengthEq() int64 {
	if m != nil {
		return m.LengthEq
	}
	return 0
}

var E_Field = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.FieldOptions)(nil),
	ExtensionType: (*FieldValidator)(nil),
	Field:         48771,
	Name:          "validator.field",
	Tag:           "bytes,48771,opt,name=field",
	Filename:      "validator.proto",
}

var E_Rfield = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.FieldOptions)(nil),
	ExtensionType: (*RepeatedFieldValidator)(nil),
	Field:         48772,
	Name:          "validator.rfield",
	Tag:           "bytes,48772,opt,name=rfield",
	Filename:      "validator.proto",
}

func init() {
	proto.RegisterType((*FieldValidator)(nil), "validator.FieldValidator")
	proto.RegisterType((*RepeatedFieldValidator)(nil), "validator.RepeatedFieldValidator")
	proto.RegisterExtension(E_Field)
	proto.RegisterExtension(E_Rfield)
}

func init() { proto.RegisterFile("validator.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 518 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0xcf, 0x6e, 0xd3, 0x40,
	0x10, 0xc6, 0x65, 0x20, 0xa9, 0xb3, 0xa4, 0x29, 0x5a, 0x15, 0xd8, 0x16, 0x15, 0xdc, 0xc0, 0x21,
	0xfc, 0x89, 0x2d, 0xb5, 0xc0, 0xa1, 0x42, 0x42, 0x80, 0xdc, 0x5c, 0x22, 0x81, 0x7c, 0xe0, 0xd0,
	0x4b, 0xe4, 0xc4, 0x13, 0x67, 0xc5, 0xc6, 0xeb, 0x75, 0xc6, 0x94, 0x3b, 0xbc, 0x1c, 0xaf, 0xc0,
	0xbb, 0x20, 0xa1, 0xdd, 0x8d, 0x1d, 0x47, 0x42, 0x11, 0x9c, 0xa2, 0xfd, 0x7e, 0x33, 0xdf, 0xce,
	0xb7, 0xf1, 0x90, 0x83, 0xaf, 0xb1, 0xe0, 0x49, 0x8c, 0xb2, 0xf0, 0xf3, 0x42, 0xa2, 0xa4, 0x9d,
	0x5a, 0x38, 0xf6, 0x52, 0x29, 0x53, 0x01, 0x81, 0x01, 0xd3, 0x72, 0x1e, 0x24, 0xb0, 0x9a, 0x15,
	0x3c, 0xaf, 0x8b, 0xfb, 0xbf, 0x6e, 0x91, 0xde, 0x25, 0x07, 0x91, 0x7c, 0xae, 0x9a, 0xe8, 0x31,
	0x71, 0x0b, 0x50, 0x25, 0x2f, 0x20, 0x61, 0x8e, 0xe7, 0x0c, 0xdc, 0xa8, 0x3e, 0xd3, 0x43, 0xd2,
	0x2a, 0x20, 0x85, 0x6f, 0xec, 0x86, 0xe7, 0x0c, 0x3a, 0x91, 0x3d, 0xd0, 0x07, 0xa4, 0xb3, 0xc2,
	0x82, 0x67, 0xe9, 0x04, 0x14, 0x3b, 0x34, 0xc4, 0xb5, 0x42, 0xa8, 0xe8, 0x5d, 0xd2, 0xe6, 0x19,
	0x4e, 0x52, 0x64, 0x0f, 0x3d, 0x67, 0x70, 0x33, 0x6a, 0xf1, 0x0c, 0x47, 0x58, 0xc9, 0x02, 0xd9,
	0xa3, 0x5a, 0x1e, 0x23, 0xbd, 0x4f, 0xf6, 0x6c, 0x35, 0x30, 0xcf, 0xe8, 0x6d, 0x53, 0x0e, 0x15,
	0x10, 0x08, 0xec, 0xb4, 0x06, 0x63, 0x84, 0xca, 0x08, 0x14, 0xeb, 0xd7, 0x46, 0xa1, 0xa2, 0x4f,
	0x48, 0xcf, 0xc8, 0x59, 0xb9, 0x9c, 0xcc, 0x16, 0x30, 0xfb, 0xc2, 0x2e, 0x4d, 0x96, 0xae, 0xc6,
	0x59, 0xb9, 0xfc, 0xa0, 0x35, 0x7a, 0x44, 0xdc, 0xb9, 0x90, 0xb1, 0x19, 0x6f, 0xe0, 0x39, 0x03,
	0x27, 0xda, 0x33, 0xe7, 0x11, 0x6e, 0x90, 0x40, 0xf6, 0xb4, 0x81, 0xc6, 0x48, 0x1f, 0x93, 0x7d,
	0x8b, 0x20, 0x5f, 0x71, 0x21, 0x33, 0xf6, 0xcc, 0xf0, 0xae, 0x11, 0x43, 0xab, 0xe9, 0x47, 0xa9,
	0xac, 0x81, 0x3d, 0x37, 0x05, 0xee, 0xda, 0x1b, 0x36, 0x50, 0xe7, 0x79, 0xd1, 0x80, 0x3a, 0x51,
	0x7d, 0x33, 0x28, 0x36, 0x6c, 0xdc, 0x1c, 0x2a, 0xdd, 0x27, 0x20, 0x4b, 0x71, 0xa1, 0x07, 0x3e,
	0x33, 0x79, 0x5d, 0x2b, 0x8c, 0xb0, 0x01, 0x05, 0xb2, 0xf3, 0x26, 0x1c, 0x23, 0x3d, 0x21, 0xa4,
	0xee, 0x04, 0xf6, 0xd2, 0xd0, 0x4e, 0xd5, 0x0a, 0x0d, 0xac, 0x27, 0x7a, 0xd5, 0xc4, 0x63, 0x3b,
	0xef, 0x1a, 0x83, 0x62, 0xaf, 0x9b, 0xd6, 0xa1, 0xd2, 0x7f, 0xcd, 0x54, 0x4a, 0xa1, 0xd1, 0x1b,
	0xf3, 0xc6, 0x6d, 0x7d, 0x0c, 0x55, 0xff, 0xa7, 0x43, 0xee, 0x45, 0x90, 0x43, 0x8c, 0x90, 0xfc,
	0xc7, 0x47, 0xb6, 0x15, 0xb2, 0xbb, 0x2b, 0xe4, 0xfe, 0xce, 0x90, 0xbd, 0xdd, 0x21, 0x0f, 0x76,
	0x86, 0xbc, 0xb3, 0x1d, 0xf2, 0xe2, 0x13, 0x69, 0xcd, 0x75, 0x04, 0x7a, 0xe2, 0xdb, 0xa5, 0xf2,
	0xab, 0xa5, 0xf2, 0x4d, 0xb4, 0x8f, 0x39, 0x72, 0x99, 0xad, 0xd8, 0xf7, 0xdf, 0x7a, 0x35, 0x6e,
	0x9f, 0x1d, 0xf9, 0x9b, 0xbd, 0xdc, 0xce, 0x1e, 0x59, 0xa3, 0x8b, 0x2b, 0xd2, 0x2e, 0xfe, 0xc9,
	0xf2, 0xc7, 0xda, 0xf2, 0xb4, 0x61, 0xf9, 0xf7, 0x67, 0x8d, 0xd6, 0x8e, 0xef, 0xdf, 0x5d, 0xbd,
	0x4d, 0x39, 0x2e, 0xca, 0xa9, 0x3f, 0x93, 0xcb, 0x20, 0x8a, 0xb3, 0x14, 0x44, 0x04, 0xb1, 0x80,
	0x60, 0x6e, 0xee, 0x18, 0x5e, 0x17, 0x71, 0x3e, 0xac, 0xed, 0x86, 0x2b, 0x4c, 0x82, 0x54, 0x6a,
	0x31, 0x48, 0xaf, 0xed, 0x14, 0x6d, 0xf3, 0x73, 0xfe, 0x27, 0x00, 0x00, 0xff, 0xff, 0x10, 0x8b,
	0x55, 0x80, 0x60, 0x04, 0x00, 0x00,
}
