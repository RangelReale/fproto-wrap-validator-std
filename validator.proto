syntax = "proto3";
package validator;
option go_package = "github.com/RangelReale/fproto-wrap-validator-std/gowrap/gwproto";

import "google/protobuf/descriptor.proto";

extend google.protobuf.FieldOptions {
    FieldValidator field = 48771;
    RepeatedFieldValidator rfield = 48772;
}

extend google.protobuf.OneofOptions {
    OneOfFieldValidator oofield = 48773;
}

// Field validator. In the case of repeated or map, there rules apply to EACH item, not to the repeated field itself.
// For the repeated field itself rules, see RepeatedFieldValidator.
message FieldValidator {
    // Whether the field is required.
    bool required = 1;
    // Uses a Golang RE2-syntax regex to match the field contents.
    string regex = 2;

    // Only allow the exact string value.
    string string_eq = 20;
    // Only allow items in this list.
    repeated string string_in = 22;
    // Only allow items NOT in this list.
    repeated string string_not_in = 23;

    // Field value of integer strictly greater than this value.
    int64 int_gt = 30;
    // Field value of integer strictly smaller than this value.
    int64 int_lt = 31;
    // Field value of integer strictly greater than this value.
    int64 int_gte = 32;
    // Field value of integer strictly smaller than this value.
    int64 int_lte = 33;
    // Field value of integer exactly this value.
    int64 int_eq = 34;
    // Only allow items in this list.
    repeated int64 int_in = 35;
    // Only allow items NOT in this list.
    repeated int64 int_not_in = 36;
    // In the case of enums, only allow defined values, else ignored.
    bool int_enum_check = 39;

    // Field value of double strictly greater than this value.
    // Note that this value can only take on a valid floating point
    // value. Use together with float_epsilon if you need something more specific.
    double float_gt = 40;
    // Field value of double strictly smaller than this value.
    // Note that this value can only take on a valid floating point
    // value. Use together with float_epsilon if you need something more specific.
    double float_lt = 41;
    // Field value of double describing the epsilon within which
    // any comparison should be considered to be true. For example,
    // when using float_gt = 0.35, using a float_epsilon of 0.05
    // would mean that any value above 0.30 is acceptable. It can be
    // thought of as a {float_value_condition} +- {float_epsilon}.
    // If unset, no correction for floating point inaccuracies in
    // comparisons will be attempted.
    double float_epsilon = 42;
    // Floating-point value compared to which the field content should be greater or equal.
    double float_gte = 43;
    // Floating-point value compared to which the field content should be smaller or equal.
    double float_lte = 44;
    // Floating-point value compared to which the field content should be equal or whithin the epsilon.
    double float_eq = 45;
    // Only allow items in this list.
    repeated double float_in = 46;
    // Only allow items NOT in this list.
    repeated double float_not_in = 47;

    // Field value of length greater than this value.
    int64 length_gt = 50;
    // Field value of length smaller than this value.
    int64 length_lt = 51;
    // Field value of length greater than this value.
    int64 length_gte = 52;
    // Field value of length smaller than this value.
    int64 length_lte = 53;
    // Field value of integer strictly equal this value.
    int64 length_eq = 54;
    // Only allow items in this list.
    repeated int64 length_in = 55;
    // Only allow items NOT in this list.
    repeated int64 length_not_in = 56;

    // Bool must be this value
    bool bool_eq = 60;
}

message RepeatedFieldValidator {
    // Whether the field is required.
    bool required = 1;
    // Field value of length greater than this value.
    int64 length_gt = 12;
    // Field value of length smaller than this value.
    int64 length_lt = 13;
    // Field value of length greater than this value.
    int64 length_gte = 14;
    // Field value of length smaller than this value.
    int64 length_lte = 15;
    // Field value of integer strictly equal this value.
    int64 length_eq = 16;
    // Only allow items in this list.
    repeated int64 length_in = 17;
    // Only allow items NOT in this list.
    repeated int64 length_not_in = 18;
}

message OneOfFieldValidator {
    // Whether the field is required.
    bool required = 1;
}